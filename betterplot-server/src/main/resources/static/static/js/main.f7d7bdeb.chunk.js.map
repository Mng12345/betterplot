{"version":3,"sources":["Chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChartType","Chart","props","chart","state","show","this","echart","init","document","getElementById","id","flush","style","display","width","height","margin","data","tooltip","trigger","axisPointer","type","label","backgroundColor","console","log","axios","get","then","response","JSON","stringify","options","buildOptions","setOption","catch","reason","setState","Component","App","charts","map","key","className","t","body","clientHeight","window","scroll","top","left","behavior","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uMAIKA,E,4IAAAA,K,kBAAAA,E,YAAAA,E,WAAAA,M,SA8CgBC,E,kDAGnB,WAAYC,GAAW,IAAD,8BACpB,cAAMA,IAHRC,WAEsB,EAEpB,EAAKC,MAAQ,CACXC,MAAM,GAHY,E,gEAQpBC,KAAKH,MAAQI,IAAOC,KAClBC,SAASC,eAAT,iBAAkCJ,KAAKJ,MAAMS,MAE/CL,KAAKM,U,+BAIL,OACE,yBAAKC,MAAOP,KAAKF,MAAMC,KAAO,GAAK,CAAES,QAAS,SAC5C,yBACEH,GAAE,iBAAYL,KAAKJ,MAAMS,IACzBE,MAAO,CACLE,MAAO,IACPC,OAAQ,IACRC,OAAQ,kB,mCAOLC,GACX,OAAO,2BACAA,GADP,IAEIC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXC,KAAM,QACNC,MAAO,CACLC,gBAAiB,iB,8BAQpB,IAAD,OACNC,QAAQC,IAAR,cAAmBpB,KAAKJ,MAAMS,KAC9BgB,IACGC,IAAI,yBAA2BtB,KAAKJ,MAAMS,IAC1CkB,MAAK,SAACC,GACL,IAAIZ,EAAOY,EAASZ,KACpBO,QAAQC,IAAR,kBAAuBK,KAAKC,UAAUd,KACtC,IAAMe,EAAU,EAAKC,aAAahB,GAClCO,QAAQC,IAAIK,KAAKC,UAAUC,IAC3B,EAAK9B,MAAMgC,UAAUF,MAEtBG,OAAM,SAACC,GAEN,EAAKC,SAAS,CACZjC,MAAM,W,GA9DmBkC,aC9CdC,E,uKAEjB,IACMC,EADM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrBC,KAAI,SAAC/B,GAAD,OAAQ,kBAAC,EAAD,CAAOA,GAAE,UAAKA,GAAMgC,IAAG,UAAKhC,QAC3D,OACE,yBAAKiC,UAAU,OACb,0CACCH,K,0CAML,IAAII,EAAIpC,SAASqC,KAAKC,aACtBC,OAAOC,OAAO,CAAEC,IAAKL,EAAGM,KAAM,EAAGC,SAAU,e,GAddb,aCQbc,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASC,eAAe,SDiIpB,kBAAmBkD,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.f7d7bdeb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport echart, { ECharts } from \"echarts\";\r\n\r\nenum ChartType {\r\n  SCATTER = \"scatter\",\r\n  LINE = \"line\",\r\n  BAR = \"bar\",\r\n}\r\n\r\ntype P = {\r\n  id: string;\r\n};\r\n\r\ntype Series = {\r\n  data: number[];\r\n  name: string;\r\n  type: ChartType;\r\n};\r\n\r\ntype Data = {\r\n  title: Title;\r\n  xAxis: XAxis;\r\n  y: Series[];\r\n  yAxis: YAxis;\r\n  legend: Legend;\r\n};\r\n\r\ntype Legend = {\r\n  data: string[];\r\n};\r\n\r\ntype Title = {\r\n  text: string;\r\n};\r\n\r\ntype XAxis = {\r\n  data: (string | number)[];\r\n  name: string;\r\n  type: \"time\" | \"value\" | \"category\";\r\n};\r\n\r\ntype YAxis = {\r\n  type: \"category\" | \"value\";\r\n};\r\n\r\ntype S = {\r\n  show: boolean;\r\n};\r\n\r\nexport default class Chart extends Component<P, S> {\r\n  chart!: ECharts;\r\n\r\n  constructor(props: P) {\r\n    super(props);\r\n    this.state = {\r\n      show: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.chart = echart.init(\r\n      document.getElementById(`echart-${this.props.id}`) as HTMLDivElement\r\n    );\r\n    this.flush();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.state.show ? {} : { display: \"none\" }}>\r\n        <div\r\n          id={`echart-${this.props.id}`}\r\n          style={{\r\n            width: 800,\r\n            height: 600,\r\n            margin: \"10px auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  buildOptions(data: Data) {\r\n    return {\r\n        ...data,\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n              backgroundColor: '#6a7985'\r\n            }\r\n          }\r\n        }\r\n    };\r\n  }\r\n\r\n  // 刷新图片\r\n  flush() {\r\n    console.log(`id: ${this.props.id}`);\r\n    axios\r\n      .get(\"/api/getchart?chartId=\" + this.props.id)\r\n      .then((response) => {\r\n        let data = response.data as Data;\r\n        console.log(`data: \\n${JSON.stringify(data)}`);\r\n        const options = this.buildOptions(data);\r\n        console.log(JSON.stringify(options));\r\n        this.chart.setOption(options as any);\r\n      })\r\n      .catch((reason) => {\r\n        // 一旦报错，则使这个组件不显示\r\n        this.setState({\r\n          show: false,\r\n        });\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Chart from \"./Chart\";\n\nexport default class App extends Component {\n  render() {\n    const ids = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const charts = ids.map((id) => <Chart id={`${id}`} key={`${id}`} />);\n    return (\n      <div className=\"App\">\n        <h2>betterplot</h2>\n        {charts}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    let t = document.body.clientHeight;\n    window.scroll({ top: t, left: 0, behavior: \"smooth\" });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}